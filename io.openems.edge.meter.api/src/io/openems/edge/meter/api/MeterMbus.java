package io.openems.edge.meter.api;

import io.openems.common.channel.AccessMode;
import io.openems.common.channel.Unit;
import io.openems.common.types.OpenemsType;
import io.openems.edge.common.channel.Channel;
import io.openems.edge.common.channel.Doc;
import io.openems.edge.common.channel.LongReadChannel;
import io.openems.edge.common.channel.StringReadChannel;
import io.openems.edge.common.channel.value.Value;
import io.openems.edge.common.component.OpenemsComponent;

/**
 * The Meter Interface. The Base Nature for {@link HeatMeterMbus} {@link GasMeterMbus} and {@link WaterMeterMbus}.
 * It provides base Channel, that every Meter may need.
 * Except the Reading channel: Due to different Units it's generally a better idea to implement those Channel in the
 * inheriting interfaces.
 */
public interface MeterMbus extends OpenemsComponent {
    public enum ChannelId implements io.openems.edge.common.channel.ChannelId {


        /**
         * The last timestamp. Unit is seconds since Epoch (1. 1. 1970). The timestamp is generated by OpenEMS.
         *
         * <ul>
         * <li>Interface: WaterMeter
         * <li>Type: Long
         * <li>Unit: seconds
         * </ul>
         */
        TIMESTAMP_SECONDS(Doc.of(OpenemsType.LONG).unit(Unit.SECONDS).accessMode(AccessMode.READ_ONLY)),

        /**
         * The last timestamp, as a string. Format is "dd-MM-yyyy HH:mm". Calculated from TIMESTAMP_SECONDS.
         *
         * <ul>
         * <li>Interface: WaterMeter
         * <li>Type: String
         * </ul>
         */
        TIMESTAMP_STRING(Doc.of(OpenemsType.STRING).accessMode(AccessMode.READ_ONLY)),


        /**
         * Error message. Will contain "No error" when there is no error. Otherwise a description of the error will be
         * given.
         */

        ERROR_MESSAGE(Doc.of(OpenemsType.STRING).accessMode(AccessMode.READ_ONLY)),

        /**
         * Generic Meter Reading. Each Meter decides on it's own what to put here.
         */
        METER_READING(Doc.of(OpenemsType.DOUBLE).accessMode(AccessMode.READ_ONLY));


        private final Doc doc;

        private ChannelId(Doc doc) {
            this.doc = doc;
        }

        public Doc doc() {
            return this.doc;
        }


    }


    /**
     * Gets the Channel for {@link ChannelId#TIMESTAMP_SECONDS}.
     *
     * @return the Channel
     */
    default LongReadChannel getTimestampChannel() {
        return this.channel(ChannelId.TIMESTAMP_SECONDS);
    }

    /**
     * Gets the last timestamp in [s since Epoch]. See {@link ChannelId#TIMESTAMP_SECONDS}.
     *
     * @return the Channel {@link Value}
     */
    public default Value<Long> getTimestamp() {
        return this.getTimestampChannel().value();
    }

    /**
     * Internal method to set the 'nextValue' on {@link ChannelId#TIMESTAMP_SECONDS}
     * Channel.
     *
     * @param value the next value
     */
    public default void _setTimestamp(Long value) {
        this.getTimestampChannel().setNextValue(value);
    }

    /**
     * Internal method to set the 'nextValue' on {@link ChannelId#TIMESTAMP_SECONDS}
     * Channel.
     *
     * @param value the next value
     */
    public default void _setTimestamp(long value) {
        this.getTimestampChannel().setNextValue(value);
    }

    /**
     * Internal method to set the 'nextValue' on {@link ChannelId#TIMESTAMP_STRING}
     * Channel.
     *
     * @param value the next value
     */
    public default void _setTimestamp(String value) {
        this.getTimestampStringChannel().setNextValue(value);
    }

    /**
     * Gets the Channel for {@link ChannelId#TIMESTAMP_STRING}.
     *
     * @return the Channel
     */
    default StringReadChannel getTimestampStringChannel() {
        return this.channel(ChannelId.TIMESTAMP_STRING);
    }

    /**
     * Gets the last timestamp as a String. Format is DD-MM-YYYY HH:MM. See {@link ChannelId#TIMESTAMP_STRING}.
     *
     * @return the Channel {@link Value}
     */
    public default Value<String> getTimestampString() {
        return this.getTimestampStringChannel().value();
    }


    /**
     * Gets the Channel for {@link ChannelId#ERROR_MESSAGE}.
     *
     * @return the Channel
     */
    default StringReadChannel getErrorMessageChannel() {
        return this.channel(ChannelId.ERROR_MESSAGE);
    }

    /**
     * Gets the error message. Will contain "No error" when there is no error. See {@link ChannelId#ERROR_MESSAGE}.
     *
     * @return the Channel {@link Value}
     */
    public default Value<String> getErrorMessage() {
        return this.getErrorMessageChannel().value();
    }

    /**
     * Gets the Channel for {@link ChannelId#METER_READING}.
     *
     * @return the Channel
     */
    default Channel<Double> getMeterReadingChannel() {
        return this.channel(ChannelId.METER_READING);
    }

    /**
     * Gets the Value for {@link ChannelId#METER_READING}.
     *
     * @return the Channel
     */
    default Value<Double> getMeterReading() {
        return this.getMeterReadingChannel().value();
    }

    /**
     * Internal method to set the 'nextValue' on {@link ChannelId#METER_READING}
     * Channel.
     *
     * @param value the next value
     */
    default void _setMeterReading(Double value) {
        this.getMeterReadingChannel().setNextValue(value);
    }


}
